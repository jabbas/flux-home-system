---
- name: Generate configuration using secrets.yaml
  connection: local
  ansible.builtin.shell: "talosctl gen config {{ talos.cluster_name }} {{ talos.endpoint }} --with-secrets {{ talos.secrets_path }} --with-examples=true --with-docs=false --install-disk {{ talos.boot_disk }} --additional-sans {{ groups['all'] | join(',') }} --force"

- name: Update talosconfig with first endpoint
  connection: local
  ansible.builtin.shell: "talosctl --talosconfig talosconfig config endpoint {{ groups['all'][0] }}"

- name: Check if nodes is already provisioned
  block:
    - name: Get version
      ansible.builtin.shell: "talosctl --talosconfig talosconfig --nodes {{ item }} get version -o jsonpath='{.node}'"
      register: node_versions
      loop: "{{ groups['all'] }}"
      ignore_errors: true
      failed_when: false
      changed_when: false
    - name: Prepare the dict of already provisioned nodes
      set_fact:
        already_provisioned_nodes: "{{ already_provisioned_nodes | default({}) | combine({ (item.item): (item.item == item.stdout) }) }}"
      loop: "{{ node_versions.results }}"

- name: Apply patches
  ansible.builtin.shell: "talosctl --talosconfig talosconfig --nodes {{ item }} apply {{ '--insecure' if not already_provisioned_nodes[item] else '' }} -f controlplane.yaml -p '[{\"op\": \"add\", \"path\": \"/machine/install/image\", \"value\": \"factory.talos.dev/metal-installer/{{ talos.schematic_id }}:v1.10.5\"}]' -p @patch/allow-scheduling.yaml -p @patch/remove-externallb-label.yaml"
  #ansible.builtin.shell: "talosctl --talosconfig talosconfig --nodes {{ item }} apply {{ '--insecure' if not already_provisioned_nodes[item] else '' }} -f controlplane.yaml -p @patch/factory-image.yaml -p @patch/allow-scheduling.yaml -p @patch/remove-externallb-label.yaml"
  loop: "{{ groups['all'] }}"

- name: Wait for Talos install to be ready
  ansible.builtin.wait_for:
    host: "{{ item }}"
    port: 50001
  loop: "{{ groups['all'] }}"

- name: Bootstrap on the first node
  ansible.builtin.shell: "talosctl --talosconfig talosconfig --nodes {{ groups['all'][0] }} bootstrap"
  when: already_provisioned_nodes.values() |select('equalto', false) |list |length==already_provisioned_nodes |length

- name: Wait for Talos boostrap to be completed (kubeapi is ready)
  ansible.builtin.wait_for:
    host: "{{ item }}"
    port: 6443
  loop: "{{ groups['all'] }}"

- name: Update talosconfig with endpoint
  connection: local
  ansible.builtin.shell: "talosctl --talosconfig talosconfig config endpoint {{ groups['all'] | join(' ') }}"

- name: Create \$HOME/.talos directory if it doesn't exist
  ansible.builtin.file:
    path: "$HOME/.talos"
    state: directory

- name: Copy talosconfig to \$HOME/.talos/config
  connection: local
  ansible.builtin.copy:
    src: talosconfig
    dest: "$HOME/.talos/config"

- name: Generate kubectl config
  connection: local
  ansible.builtin.shell: "talosctl --nodes {{ groups['all'][0] }} --endpoints {{ groups['all'][0] }} kubeconfig"

- name: Provision it with flux
  connection: local
  kubernetes.core.k8s:
    state: present
    src: "{{ item }}"
  loop: "{{ lookup('fileglob', playbook_dir + '/provision/*.yaml', wantlist=True) | sort }}"
